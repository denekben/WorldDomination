// <auto-generated />
using System;
using Game.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Game.Infrastructure.Migrations
{
    [DbContext(typeof(GameWriteDbContext))]
    [Migration("20241127182933_AddedOrdersAndSanctions_GameWrite")]
    partial class AddedOrdersAndSanctions_GameWrite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Game")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CityImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<int>("DevelopmentLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("HaveShield")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("boolean");

                    b.Property<int>("LivingLevel")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Budget")
                        .HasColumnType("integer");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlagImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HaveNuclearTechnology")
                        .HasColumnType("boolean");

                    b.Property<int>("Income")
                        .HasColumnType("integer");

                    b.Property<int>("LivingLevel")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NuclearTechnology")
                        .HasColumnType("integer");

                    b.Property<bool>("OrderApplied")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("RoomId");

                    b.ToTable("Countries", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Game", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("integer");

                    b.Property<int>("EcologyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("GameState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasTeams")
                        .HasColumnType("boolean");

                    b.Property<int>("RoundQuantity")
                        .HasColumnType("integer");

                    b.HasKey("RoomId");

                    b.ToTable("Games", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Order", b =>
                {
                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<int>("BombsToBuyQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("CitiesToDevelop")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CitiesToSetShield")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CitiesToStrike")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountriesToSetSanctions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DevelopEcologyProgram")
                        .HasColumnType("boolean");

                    b.Property<bool>("DevelopNuclearTechology")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("CountryId");

                    b.ToTable("Orders", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Sanction", b =>
                {
                    b.Property<Guid>("IssuserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudienceId")
                        .HasColumnType("uuid");

                    b.Property<float>("SanctionPower")
                        .HasColumnType("real");

                    b.HasKey("IssuserId", "AudienceId");

                    b.HasIndex("AudienceId");

                    b.ToTable("Sanctions", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("CountryLimit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 27, 18, 29, 33, 367, DateTimeKind.Utc).AddTicks(2369));

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasTeams")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGameActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("RoomCode")
                        .HasColumnType("text");

                    b.Property<int>("RoomMemberLimit")
                        .HasColumnType("integer");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoundQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Rooms", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.RoomMember", b =>
                {
                    b.Property<Guid>("GameUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("GameRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoomMemberRole")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("GameUserId", "RoomId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomMembers", "Game");

                    b.HasDiscriminator<string>("RoomMemberRole").HasValue("RoomMember");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Users.Entities.GameUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameUsers", "Game");
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CityPattern", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CityImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCapital")
                        .HasColumnType("boolean");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CityPatterns", "Game");

                    b.HasData(
                        new
                        {
                            Id = new Guid("352ea753-519b-4905-8dee-cbfea72df901"),
                            CityImagePath = "",
                            CityName = "Москва",
                            CountryId = new Guid("f1e0613a-1385-41ad-9d65-20dae1ace7ec"),
                            IsCapital = true,
                            NormalizedName = "MOSCOW"
                        },
                        new
                        {
                            Id = new Guid("e576a838-1129-4930-81f3-1ee0d3bf8413"),
                            CityImagePath = "",
                            CityName = "Санкт-Петербург",
                            CountryId = new Guid("f1e0613a-1385-41ad-9d65-20dae1ace7ec"),
                            IsCapital = false,
                            NormalizedName = "SAINT_PETERSBURG"
                        },
                        new
                        {
                            Id = new Guid("c292c459-6ec3-44f9-a1ff-482a6c573bcb"),
                            CityImagePath = "",
                            CityName = "Екатеринбург",
                            CountryId = new Guid("f1e0613a-1385-41ad-9d65-20dae1ace7ec"),
                            IsCapital = false,
                            NormalizedName = "YEKATERINBURG"
                        },
                        new
                        {
                            Id = new Guid("819c7d4f-e988-49d1-9d60-75a88c6216c7"),
                            CityImagePath = "",
                            CityName = "Новосибирск",
                            CountryId = new Guid("f1e0613a-1385-41ad-9d65-20dae1ace7ec"),
                            IsCapital = false,
                            NormalizedName = "NOVOSIBIRSK"
                        },
                        new
                        {
                            Id = new Guid("539432fd-e994-457a-bd8a-c0156250b7de"),
                            CityImagePath = "",
                            CityName = "Пекин",
                            CountryId = new Guid("f440a13f-f7d1-4388-abf9-654ce0f89cca"),
                            IsCapital = true,
                            NormalizedName = "BEIJING"
                        },
                        new
                        {
                            Id = new Guid("6a064602-7ab6-4008-b08d-328032ae0a37"),
                            CityImagePath = "",
                            CityName = "Шанхай",
                            CountryId = new Guid("f440a13f-f7d1-4388-abf9-654ce0f89cca"),
                            IsCapital = false,
                            NormalizedName = "SHANGHAI"
                        },
                        new
                        {
                            Id = new Guid("320e89c4-f3db-40f6-8a7a-be6cb36990fa"),
                            CityImagePath = "",
                            CityName = "Чунцин",
                            CountryId = new Guid("f440a13f-f7d1-4388-abf9-654ce0f89cca"),
                            IsCapital = false,
                            NormalizedName = "CHONGQING"
                        },
                        new
                        {
                            Id = new Guid("064324e3-01ab-4b01-90e8-251e2c37c5a9"),
                            CityImagePath = "",
                            CityName = "Тяньцзинь",
                            CountryId = new Guid("f440a13f-f7d1-4388-abf9-654ce0f89cca"),
                            IsCapital = false,
                            NormalizedName = "TIANJIN"
                        },
                        new
                        {
                            Id = new Guid("9ba4f34c-fe60-4f25-a0c1-84f3fce57efd"),
                            CityImagePath = "",
                            CityName = "Токио",
                            CountryId = new Guid("dd90320c-d24a-4781-8b81-505928ac8609"),
                            IsCapital = true,
                            NormalizedName = "TOKYO"
                        },
                        new
                        {
                            Id = new Guid("4775ce15-c28d-4e94-bba3-ee98b7617991"),
                            CityImagePath = "",
                            CityName = "Йокогама",
                            CountryId = new Guid("dd90320c-d24a-4781-8b81-505928ac8609"),
                            IsCapital = false,
                            NormalizedName = "YOKOHAMA"
                        },
                        new
                        {
                            Id = new Guid("02771133-485a-4aee-bbf7-bef03772ce82"),
                            CityImagePath = "",
                            CityName = "Осака",
                            CountryId = new Guid("dd90320c-d24a-4781-8b81-505928ac8609"),
                            IsCapital = false,
                            NormalizedName = "OSAKA"
                        },
                        new
                        {
                            Id = new Guid("e40ff9eb-0d31-4b49-8293-f28380b6027f"),
                            CityImagePath = "",
                            CityName = "Нагоя",
                            CountryId = new Guid("dd90320c-d24a-4781-8b81-505928ac8609"),
                            IsCapital = false,
                            NormalizedName = "NAGOYA"
                        },
                        new
                        {
                            Id = new Guid("f46672de-57c6-4870-83db-1489fd8de18e"),
                            CityImagePath = "",
                            CityName = "Берлин",
                            CountryId = new Guid("24ba4bb3-cc14-40eb-866a-539a98f3fab5"),
                            IsCapital = false,
                            NormalizedName = "BERLIN"
                        },
                        new
                        {
                            Id = new Guid("0efd09a0-455e-44c6-a788-d4e952ad07ea"),
                            CityImagePath = "",
                            CityName = "Гамбург",
                            CountryId = new Guid("24ba4bb3-cc14-40eb-866a-539a98f3fab5"),
                            IsCapital = false,
                            NormalizedName = "HAMBURG"
                        },
                        new
                        {
                            Id = new Guid("082c2cea-5754-427a-ab85-b94f8c38dfe4"),
                            CityImagePath = "",
                            CityName = "Мюнхен",
                            CountryId = new Guid("24ba4bb3-cc14-40eb-866a-539a98f3fab5"),
                            IsCapital = false,
                            NormalizedName = "MUNICH"
                        },
                        new
                        {
                            Id = new Guid("35ce5002-ed80-409b-acb7-d1989f042533"),
                            CityImagePath = "",
                            CityName = "Кёльн",
                            CountryId = new Guid("24ba4bb3-cc14-40eb-866a-539a98f3fab5"),
                            IsCapital = false,
                            NormalizedName = "COLOGNE"
                        },
                        new
                        {
                            Id = new Guid("826c7d51-b427-4e78-9311-7b2d208cdd73"),
                            CityImagePath = "",
                            CityName = "Париж",
                            CountryId = new Guid("9ab8a4cc-edc6-4ce5-9030-10c13296768e"),
                            IsCapital = true,
                            NormalizedName = "PARIS"
                        },
                        new
                        {
                            Id = new Guid("864434b5-2d44-4bd8-b646-e57666ec773a"),
                            CityImagePath = "",
                            CityName = "Марсель",
                            CountryId = new Guid("9ab8a4cc-edc6-4ce5-9030-10c13296768e"),
                            IsCapital = false,
                            NormalizedName = "MARSEILLE"
                        },
                        new
                        {
                            Id = new Guid("d41c75fd-b302-4904-af82-581ed693b5ff"),
                            CityImagePath = "",
                            CityName = "Лион",
                            CountryId = new Guid("9ab8a4cc-edc6-4ce5-9030-10c13296768e"),
                            IsCapital = false,
                            NormalizedName = "LYON"
                        },
                        new
                        {
                            Id = new Guid("42cc834b-3da7-435a-8eae-565bd320b8a2"),
                            CityImagePath = "",
                            CityName = "Тулуза",
                            CountryId = new Guid("9ab8a4cc-edc6-4ce5-9030-10c13296768e"),
                            IsCapital = false,
                            NormalizedName = "TOULOUSE"
                        },
                        new
                        {
                            Id = new Guid("aea6e27f-045d-4afa-ae86-172a78cb2a3c"),
                            CityImagePath = "",
                            CityName = "Вашингтон",
                            CountryId = new Guid("67fb5864-33c9-4f0e-bc08-dcb435cb85ca"),
                            IsCapital = true,
                            NormalizedName = "WASHINGTON"
                        },
                        new
                        {
                            Id = new Guid("19ae3fde-e8ed-467f-81ce-4ed4de90ff7c"),
                            CityImagePath = "",
                            CityName = "Нью-Йорк",
                            CountryId = new Guid("67fb5864-33c9-4f0e-bc08-dcb435cb85ca"),
                            IsCapital = false,
                            NormalizedName = "NEW_YORK_CITY"
                        },
                        new
                        {
                            Id = new Guid("2b01a9d2-9e93-4525-b2c7-1b843112a2bc"),
                            CityImagePath = "",
                            CityName = "Лос-Анджелес",
                            CountryId = new Guid("67fb5864-33c9-4f0e-bc08-dcb435cb85ca"),
                            IsCapital = false,
                            NormalizedName = "LOS_ANGELES"
                        },
                        new
                        {
                            Id = new Guid("d97ea31e-4ec2-43c7-ae9d-20d6d9c6bc82"),
                            CityImagePath = "",
                            CityName = "Чикаго",
                            CountryId = new Guid("67fb5864-33c9-4f0e-bc08-dcb435cb85ca"),
                            IsCapital = false,
                            NormalizedName = "CHICAGO"
                        },
                        new
                        {
                            Id = new Guid("30315ae7-541d-4523-832b-1efdf0fadb9d"),
                            CityImagePath = "",
                            CityName = "Пхеньян",
                            CountryId = new Guid("dec95200-c630-4f46-9a73-1297609ec9d7"),
                            IsCapital = true,
                            NormalizedName = "PYONGYANG"
                        },
                        new
                        {
                            Id = new Guid("1f3f4140-3bb8-4bf7-9d64-fb9c19f41b3e"),
                            CityImagePath = "",
                            CityName = "Хамхын",
                            CountryId = new Guid("dec95200-c630-4f46-9a73-1297609ec9d7"),
                            IsCapital = false,
                            NormalizedName = "HAMHUNG"
                        },
                        new
                        {
                            Id = new Guid("015e1ea4-1a4a-48db-aa3c-b26c1bdb5cf1"),
                            CityImagePath = "",
                            CityName = "Чхонджин",
                            CountryId = new Guid("dec95200-c630-4f46-9a73-1297609ec9d7"),
                            IsCapital = false,
                            NormalizedName = "CHONJIN"
                        },
                        new
                        {
                            Id = new Guid("97813bf5-fa53-4484-9d4e-a052f03f821a"),
                            CityImagePath = "",
                            CityName = "Нампхо",
                            CountryId = new Guid("dec95200-c630-4f46-9a73-1297609ec9d7"),
                            IsCapital = false,
                            NormalizedName = "NAMPO"
                        },
                        new
                        {
                            Id = new Guid("2aa4f4fe-6cda-4fdc-b3f8-dcb082017831"),
                            CityImagePath = "",
                            CityName = "Тегеран",
                            CountryId = new Guid("ea48ff85-f721-4dd5-bf1c-448b9473a5fc"),
                            IsCapital = true,
                            NormalizedName = "TEHRAN"
                        },
                        new
                        {
                            Id = new Guid("cff641e1-c608-4d50-a403-e71ef1a73177"),
                            CityImagePath = "",
                            CityName = "Мешхед",
                            CountryId = new Guid("ea48ff85-f721-4dd5-bf1c-448b9473a5fc"),
                            IsCapital = false,
                            NormalizedName = "MASHHAD"
                        },
                        new
                        {
                            Id = new Guid("28ac411d-d3d7-4397-9050-dd8c3438c2e3"),
                            CityImagePath = "",
                            CityName = "Исфахан",
                            CountryId = new Guid("ea48ff85-f721-4dd5-bf1c-448b9473a5fc"),
                            IsCapital = false,
                            NormalizedName = "ISFAHAN"
                        },
                        new
                        {
                            Id = new Guid("ef6f40e3-a6a3-4222-bf88-f92fa410b659"),
                            CityImagePath = "",
                            CityName = "Кередж",
                            CountryId = new Guid("ea48ff85-f721-4dd5-bf1c-448b9473a5fc"),
                            IsCapital = false,
                            NormalizedName = "KARAJ"
                        },
                        new
                        {
                            Id = new Guid("4495e717-886d-4a73-b3aa-8b10c0cb2fbf"),
                            CityImagePath = "",
                            CityName = "Гавана",
                            CountryId = new Guid("08a703c2-f882-4047-b049-e8d4c6882edc"),
                            IsCapital = true,
                            NormalizedName = "HAVANA"
                        },
                        new
                        {
                            Id = new Guid("0caff32e-e0e3-436a-9644-e3aa00cb421e"),
                            CityImagePath = "",
                            CityName = "Санктьяго-де-Куба",
                            CountryId = new Guid("08a703c2-f882-4047-b049-e8d4c6882edc"),
                            IsCapital = false,
                            NormalizedName = "SANTIAGO_DE_CUBA"
                        },
                        new
                        {
                            Id = new Guid("408cfc3d-f5b1-4b0c-8051-cf2eeb159449"),
                            CityImagePath = "",
                            CityName = "Камагуэй",
                            CountryId = new Guid("08a703c2-f882-4047-b049-e8d4c6882edc"),
                            IsCapital = false,
                            NormalizedName = "CAMAGUEY"
                        },
                        new
                        {
                            Id = new Guid("cffafda2-7765-4d08-a84b-e308c5ac6b97"),
                            CityImagePath = "",
                            CityName = "Ольгин",
                            CountryId = new Guid("08a703c2-f882-4047-b049-e8d4c6882edc"),
                            IsCapital = false,
                            NormalizedName = "OLGUIN"
                        },
                        new
                        {
                            Id = new Guid("b7b19c13-19ab-46c9-b457-1b4e3a90a8bb"),
                            CityImagePath = "",
                            CityName = "Берн",
                            CountryId = new Guid("24d3615b-4417-4b3d-afd6-0f40060d03f9"),
                            IsCapital = true,
                            NormalizedName = "BERNE"
                        },
                        new
                        {
                            Id = new Guid("2b27c088-d091-449b-b7fb-c63e66adf4c3"),
                            CityImagePath = "",
                            CityName = "Цюрих",
                            CountryId = new Guid("24d3615b-4417-4b3d-afd6-0f40060d03f9"),
                            IsCapital = false,
                            NormalizedName = "ZURICH"
                        },
                        new
                        {
                            Id = new Guid("ebccc2b1-dd5b-4c61-b13d-280389e51abe"),
                            CityImagePath = "",
                            CityName = "Женева",
                            CountryId = new Guid("24d3615b-4417-4b3d-afd6-0f40060d03f9"),
                            IsCapital = false,
                            NormalizedName = "GENEVA"
                        },
                        new
                        {
                            Id = new Guid("92f9f1c3-e667-4f86-bfba-5d836f1d3c7a"),
                            CityImagePath = "",
                            CityName = "Базель",
                            CountryId = new Guid("24d3615b-4417-4b3d-afd6-0f40060d03f9"),
                            IsCapital = false,
                            NormalizedName = "BASEL"
                        },
                        new
                        {
                            Id = new Guid("e5c6cec6-b847-404b-a080-812bbba49483"),
                            CityImagePath = "",
                            CityName = "Лондон",
                            CountryId = new Guid("6a26a5f3-8a6e-40b9-a046-066f960bab4d"),
                            IsCapital = true,
                            NormalizedName = "LONDON"
                        },
                        new
                        {
                            Id = new Guid("d4782290-54f8-4518-950d-edc946ffdb08"),
                            CityImagePath = "",
                            CityName = "Бирмингем",
                            CountryId = new Guid("6a26a5f3-8a6e-40b9-a046-066f960bab4d"),
                            IsCapital = false,
                            NormalizedName = "BIRMINGHAM"
                        },
                        new
                        {
                            Id = new Guid("bc1844d5-c0f2-4f95-b662-fcd5d1bbf25a"),
                            CityImagePath = "",
                            CityName = "Глазго",
                            CountryId = new Guid("6a26a5f3-8a6e-40b9-a046-066f960bab4d"),
                            IsCapital = false,
                            NormalizedName = "GLASGOW"
                        },
                        new
                        {
                            Id = new Guid("d2c880db-dbf9-4b7f-92d4-22c58a84c467"),
                            CityImagePath = "",
                            CityName = "Манчестер",
                            CountryId = new Guid("6a26a5f3-8a6e-40b9-a046-066f960bab4d"),
                            IsCapital = false,
                            NormalizedName = "MANCHESTER"
                        });
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CountryPattern", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlagImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CountryPatterns", "Game");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1e0613a-1385-41ad-9d65-20dae1ace7ec"),
                            CountryName = "Россия",
                            FlagImagePath = "",
                            NormalizedName = "RUSSIA"
                        },
                        new
                        {
                            Id = new Guid("f440a13f-f7d1-4388-abf9-654ce0f89cca"),
                            CountryName = "Китай",
                            FlagImagePath = "",
                            NormalizedName = "CHINA"
                        },
                        new
                        {
                            Id = new Guid("dd90320c-d24a-4781-8b81-505928ac8609"),
                            CountryName = "Япония",
                            FlagImagePath = "",
                            NormalizedName = "JAPAN"
                        },
                        new
                        {
                            Id = new Guid("24ba4bb3-cc14-40eb-866a-539a98f3fab5"),
                            CountryName = "Германия",
                            FlagImagePath = "",
                            NormalizedName = "GERMANY"
                        },
                        new
                        {
                            Id = new Guid("9ab8a4cc-edc6-4ce5-9030-10c13296768e"),
                            CountryName = "Франция",
                            FlagImagePath = "",
                            NormalizedName = "FRANCE"
                        },
                        new
                        {
                            Id = new Guid("67fb5864-33c9-4f0e-bc08-dcb435cb85ca"),
                            CountryName = "США",
                            FlagImagePath = "",
                            NormalizedName = "UNITED_STATES"
                        },
                        new
                        {
                            Id = new Guid("dec95200-c630-4f46-9a73-1297609ec9d7"),
                            CountryName = "Северная Корея",
                            FlagImagePath = "",
                            NormalizedName = "NORTH_KOREA"
                        },
                        new
                        {
                            Id = new Guid("ea48ff85-f721-4dd5-bf1c-448b9473a5fc"),
                            CountryName = "Иран",
                            FlagImagePath = "",
                            NormalizedName = "IRAN"
                        },
                        new
                        {
                            Id = new Guid("08a703c2-f882-4047-b049-e8d4c6882edc"),
                            CountryName = "Куба",
                            FlagImagePath = "",
                            NormalizedName = "CUBA"
                        },
                        new
                        {
                            Id = new Guid("24d3615b-4417-4b3d-afd6-0f40060d03f9"),
                            CountryName = "Швейцария",
                            FlagImagePath = "",
                            NormalizedName = "SWITZERLAND"
                        },
                        new
                        {
                            Id = new Guid("6a26a5f3-8a6e-40b9-a046-066f960bab4d"),
                            CountryName = "Великобритания",
                            FlagImagePath = "",
                            NormalizedName = "GREAT_BRITAIN"
                        });
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Organizer", b =>
                {
                    b.HasBaseType("Game.Domain.DomainModels.Rooms.Entities.RoomMember");

                    b.HasDiscriminator().HasValue("Organizer");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Player", b =>
                {
                    b.HasBaseType("Game.Domain.DomainModels.Rooms.Entities.RoomMember");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.City", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Country", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Game", "Game")
                        .WithMany("Countries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.Room", "Room")
                        .WithMany("Countries")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Game", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.Room", "Room")
                        .WithOne("DomainGame")
                        .HasForeignKey("Game.Domain.DomainModels.Games.Entities.Game", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Order", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Country")
                        .WithOne("Order")
                        .HasForeignKey("Game.Domain.DomainModels.Games.Entities.Order", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Sanction", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Audience")
                        .WithMany("IncomingSanctions")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Issuser")
                        .WithMany("OutgoingSanctions")
                        .HasForeignKey("IssuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("Issuser");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Room", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Users.Entities.GameUser", "Creator")
                        .WithMany("Rooms")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.RoomMember", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Country")
                        .WithMany("Players")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Game.Domain.DomainModels.Users.Entities.GameUser", "GameUser")
                        .WithMany("CreatedMembers")
                        .HasForeignKey("GameUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.Room", "Room")
                        .WithMany("RoomMembers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("GameUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CityPattern", b =>
                {
                    b.HasOne("Game.Infrastructure.Seed.CountryPattern", "CountryPattern")
                        .WithMany("CityPatterns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryPattern");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("IncomingSanctions");

                    b.Navigation("Order")
                        .IsRequired();

                    b.Navigation("OutgoingSanctions");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Game", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Room", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("DomainGame")
                        .IsRequired();

                    b.Navigation("RoomMembers");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Users.Entities.GameUser", b =>
                {
                    b.Navigation("CreatedMembers");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CountryPattern", b =>
                {
                    b.Navigation("CityPatterns");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Game.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Game.Infrastructure.Migrations
{
    [DbContext(typeof(GameWriteDbContext))]
    [Migration("20241107160320_V4_GameWrite")]
    partial class V4_GameWrite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Game")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CityImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<int>("DevelopmentLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("HaveShield")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("boolean");

                    b.Property<int>("LivingLevel")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Budget")
                        .HasColumnType("integer");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlagImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HaveNuclearTechnology")
                        .HasColumnType("boolean");

                    b.Property<int>("Income")
                        .HasColumnType("integer");

                    b.Property<int>("LivingLevel")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NuclearTechnology")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("RoomId");

                    b.ToTable("Countries", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Game", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("integer");

                    b.Property<int>("EcologyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasTeams")
                        .HasColumnType("boolean");

                    b.Property<int>("RoundQuantity")
                        .HasColumnType("integer");

                    b.HasKey("RoomId");

                    b.ToTable("Games", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Sanction", b =>
                {
                    b.Property<Guid>("IssuserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudienceId")
                        .HasColumnType("uuid");

                    b.Property<float>("SanctionPower")
                        .HasColumnType("real");

                    b.HasKey("IssuserId", "AudienceId");

                    b.HasIndex("AudienceId");

                    b.ToTable("Sanctions", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("CountryLimit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 7, 16, 3, 20, 360, DateTimeKind.Utc).AddTicks(8315));

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasTeams")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGameActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("RoomCode")
                        .HasColumnType("text");

                    b.Property<int>("RoomMemberLimit")
                        .HasColumnType("integer");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoundQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Rooms", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.RoomMember", b =>
                {
                    b.Property<Guid>("GameUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("GameRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoomMemberRole")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("GameUserId", "RoomId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomMembers", "Game");

                    b.HasDiscriminator<string>("RoomMemberRole").HasValue("RoomMember");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Users.Entities.GameUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameUsers", "Game");
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CityPattern", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CityImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCapital")
                        .HasColumnType("boolean");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CityPatterns", "Game");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5e4769b-38ad-458a-8d63-e4e06905de74"),
                            CityImagePath = "",
                            CityName = "Москва",
                            CountryId = new Guid("fd710db7-4d24-400d-b0bf-c384a2e239f7"),
                            IsCapital = true,
                            NormalizedName = "MOSCOW"
                        },
                        new
                        {
                            Id = new Guid("4267a75c-6d09-41d4-bb9d-1065ae80f68e"),
                            CityImagePath = "",
                            CityName = "Санкт-Петербург",
                            CountryId = new Guid("fd710db7-4d24-400d-b0bf-c384a2e239f7"),
                            IsCapital = false,
                            NormalizedName = "SAINT_PETERSBURG"
                        },
                        new
                        {
                            Id = new Guid("a7035030-5078-4248-baf1-670661b133e7"),
                            CityImagePath = "",
                            CityName = "Екатеринбург",
                            CountryId = new Guid("fd710db7-4d24-400d-b0bf-c384a2e239f7"),
                            IsCapital = false,
                            NormalizedName = "YEKATERINBURG"
                        },
                        new
                        {
                            Id = new Guid("278e039a-9991-45a6-be68-1e5228a2f80d"),
                            CityImagePath = "",
                            CityName = "Новосибирск",
                            CountryId = new Guid("fd710db7-4d24-400d-b0bf-c384a2e239f7"),
                            IsCapital = false,
                            NormalizedName = "NOVOSIBIRSK"
                        },
                        new
                        {
                            Id = new Guid("6d7b200b-c267-4c60-9f94-c132cc36a11a"),
                            CityImagePath = "",
                            CityName = "Пекин",
                            CountryId = new Guid("13b6d9e9-8265-491a-9ba2-b4d51ad1d3d3"),
                            IsCapital = true,
                            NormalizedName = "BEIJING"
                        },
                        new
                        {
                            Id = new Guid("a879e256-0791-4b3f-ac66-34dda1b56e2a"),
                            CityImagePath = "",
                            CityName = "Шанхай",
                            CountryId = new Guid("13b6d9e9-8265-491a-9ba2-b4d51ad1d3d3"),
                            IsCapital = false,
                            NormalizedName = "SHANGHAI"
                        },
                        new
                        {
                            Id = new Guid("fb7478f2-4a17-4e6e-bd7f-7ce02d4b155b"),
                            CityImagePath = "",
                            CityName = "Чунцин",
                            CountryId = new Guid("13b6d9e9-8265-491a-9ba2-b4d51ad1d3d3"),
                            IsCapital = false,
                            NormalizedName = "CHONGQING"
                        },
                        new
                        {
                            Id = new Guid("97064d87-9d6c-4ac1-a0f4-477087dc94e8"),
                            CityImagePath = "",
                            CityName = "Тяньцзинь",
                            CountryId = new Guid("13b6d9e9-8265-491a-9ba2-b4d51ad1d3d3"),
                            IsCapital = false,
                            NormalizedName = "TIANJIN"
                        },
                        new
                        {
                            Id = new Guid("49f8d8d5-5b41-48b7-a912-edc692108188"),
                            CityImagePath = "",
                            CityName = "Токио",
                            CountryId = new Guid("2ff83963-3a38-4abb-b517-cbcabf83dd98"),
                            IsCapital = true,
                            NormalizedName = "TOKYO"
                        },
                        new
                        {
                            Id = new Guid("ede9ae68-cc57-4bb7-851d-3ade92b5e951"),
                            CityImagePath = "",
                            CityName = "Йокогама",
                            CountryId = new Guid("2ff83963-3a38-4abb-b517-cbcabf83dd98"),
                            IsCapital = false,
                            NormalizedName = "YOKOHAMA"
                        },
                        new
                        {
                            Id = new Guid("f11de690-4583-461a-94cd-79474321cbbf"),
                            CityImagePath = "",
                            CityName = "Осака",
                            CountryId = new Guid("2ff83963-3a38-4abb-b517-cbcabf83dd98"),
                            IsCapital = false,
                            NormalizedName = "OSAKA"
                        },
                        new
                        {
                            Id = new Guid("72813ab5-1641-4903-b3f0-3c21aa727574"),
                            CityImagePath = "",
                            CityName = "Нагоя",
                            CountryId = new Guid("2ff83963-3a38-4abb-b517-cbcabf83dd98"),
                            IsCapital = false,
                            NormalizedName = "NAGOYA"
                        },
                        new
                        {
                            Id = new Guid("b1df8933-4a5d-4ade-be64-a96525b5ecdb"),
                            CityImagePath = "",
                            CityName = "Берлин",
                            CountryId = new Guid("d297f886-103b-47fa-857b-a0ad62783d76"),
                            IsCapital = false,
                            NormalizedName = "BERLIN"
                        },
                        new
                        {
                            Id = new Guid("52a7624e-47fc-4ac0-944c-f6619a7f4885"),
                            CityImagePath = "",
                            CityName = "Гамбург",
                            CountryId = new Guid("d297f886-103b-47fa-857b-a0ad62783d76"),
                            IsCapital = false,
                            NormalizedName = "HAMBURG"
                        },
                        new
                        {
                            Id = new Guid("42f66397-82ae-4329-9615-046d992259e9"),
                            CityImagePath = "",
                            CityName = "Мюнхен",
                            CountryId = new Guid("d297f886-103b-47fa-857b-a0ad62783d76"),
                            IsCapital = false,
                            NormalizedName = "MUNICH"
                        },
                        new
                        {
                            Id = new Guid("c827aef1-ffe3-4561-8a17-49146fb74b26"),
                            CityImagePath = "",
                            CityName = "Кёльн",
                            CountryId = new Guid("d297f886-103b-47fa-857b-a0ad62783d76"),
                            IsCapital = false,
                            NormalizedName = "COLOGNE"
                        },
                        new
                        {
                            Id = new Guid("58375eed-d690-4b95-8a3d-9610c2d1c115"),
                            CityImagePath = "",
                            CityName = "Париж",
                            CountryId = new Guid("6b8d3ed1-a6ea-4e54-b13a-5d14389de559"),
                            IsCapital = true,
                            NormalizedName = "PARIS"
                        },
                        new
                        {
                            Id = new Guid("14319344-44e9-4d8b-a146-21e97781c767"),
                            CityImagePath = "",
                            CityName = "Марсель",
                            CountryId = new Guid("6b8d3ed1-a6ea-4e54-b13a-5d14389de559"),
                            IsCapital = false,
                            NormalizedName = "MARSEILLE"
                        },
                        new
                        {
                            Id = new Guid("91d93781-52c0-4161-bad3-fd62ba5fd6b8"),
                            CityImagePath = "",
                            CityName = "Лион",
                            CountryId = new Guid("6b8d3ed1-a6ea-4e54-b13a-5d14389de559"),
                            IsCapital = false,
                            NormalizedName = "LYON"
                        },
                        new
                        {
                            Id = new Guid("149daeab-8e25-4b9c-8cc9-e65d60f81ef8"),
                            CityImagePath = "",
                            CityName = "Тулуза",
                            CountryId = new Guid("6b8d3ed1-a6ea-4e54-b13a-5d14389de559"),
                            IsCapital = false,
                            NormalizedName = "TOULOUSE"
                        },
                        new
                        {
                            Id = new Guid("c46ff529-32c8-4560-a1f6-3ddc1ef465ee"),
                            CityImagePath = "",
                            CityName = "Вашингтон",
                            CountryId = new Guid("c5c01588-fa4b-48aa-9b7e-98d1e4f57083"),
                            IsCapital = true,
                            NormalizedName = "WASHINGTON"
                        },
                        new
                        {
                            Id = new Guid("4aa3e470-25e0-4fe8-9166-7f2ec8335c4c"),
                            CityImagePath = "",
                            CityName = "Нью-Йорк",
                            CountryId = new Guid("c5c01588-fa4b-48aa-9b7e-98d1e4f57083"),
                            IsCapital = false,
                            NormalizedName = "NEW_YORK_CITY"
                        },
                        new
                        {
                            Id = new Guid("f53caf47-cb89-4011-b1bd-cdcad79503c5"),
                            CityImagePath = "",
                            CityName = "Лос-Анджелес",
                            CountryId = new Guid("c5c01588-fa4b-48aa-9b7e-98d1e4f57083"),
                            IsCapital = false,
                            NormalizedName = "LOS_ANGELES"
                        },
                        new
                        {
                            Id = new Guid("b9564c42-4c90-4471-9d1a-e5adca61d88f"),
                            CityImagePath = "",
                            CityName = "Чикаго",
                            CountryId = new Guid("c5c01588-fa4b-48aa-9b7e-98d1e4f57083"),
                            IsCapital = false,
                            NormalizedName = "CHICAGO"
                        },
                        new
                        {
                            Id = new Guid("4ed474c8-bf8f-4882-b21d-6336ef2dc0b6"),
                            CityImagePath = "",
                            CityName = "Пхеньян",
                            CountryId = new Guid("9220d8c5-fea4-4d84-a721-eef29cc2ef81"),
                            IsCapital = true,
                            NormalizedName = "PYONGYANG"
                        },
                        new
                        {
                            Id = new Guid("6712db5f-4a80-404d-95dd-b4d023a4be66"),
                            CityImagePath = "",
                            CityName = "Хамхын",
                            CountryId = new Guid("9220d8c5-fea4-4d84-a721-eef29cc2ef81"),
                            IsCapital = false,
                            NormalizedName = "HAMHUNG"
                        },
                        new
                        {
                            Id = new Guid("7186cfa6-2ce5-431a-beab-db18808d81f8"),
                            CityImagePath = "",
                            CityName = "Чхонджин",
                            CountryId = new Guid("9220d8c5-fea4-4d84-a721-eef29cc2ef81"),
                            IsCapital = false,
                            NormalizedName = "CHONJIN"
                        },
                        new
                        {
                            Id = new Guid("09481604-13f5-4ec5-ac84-17b6aa1b6056"),
                            CityImagePath = "",
                            CityName = "Нампхо",
                            CountryId = new Guid("9220d8c5-fea4-4d84-a721-eef29cc2ef81"),
                            IsCapital = false,
                            NormalizedName = "NAMPO"
                        },
                        new
                        {
                            Id = new Guid("dbc2bdee-be89-41f1-bedc-7509e148039d"),
                            CityImagePath = "",
                            CityName = "Тегеран",
                            CountryId = new Guid("6ec744de-3239-43af-b8ab-723874e209cd"),
                            IsCapital = true,
                            NormalizedName = "TEHRAN"
                        },
                        new
                        {
                            Id = new Guid("9f20dec1-211a-48e3-88ee-40a3914bb4e4"),
                            CityImagePath = "",
                            CityName = "Мешхед",
                            CountryId = new Guid("6ec744de-3239-43af-b8ab-723874e209cd"),
                            IsCapital = false,
                            NormalizedName = "MASHHAD"
                        },
                        new
                        {
                            Id = new Guid("05249807-b1e0-4ce8-9c7a-ddc9bc8ca32b"),
                            CityImagePath = "",
                            CityName = "Исфахан",
                            CountryId = new Guid("6ec744de-3239-43af-b8ab-723874e209cd"),
                            IsCapital = false,
                            NormalizedName = "ISFAHAN"
                        },
                        new
                        {
                            Id = new Guid("0207721e-828d-4aa7-889f-3ae146aac447"),
                            CityImagePath = "",
                            CityName = "Кередж",
                            CountryId = new Guid("6ec744de-3239-43af-b8ab-723874e209cd"),
                            IsCapital = false,
                            NormalizedName = "KARAJ"
                        },
                        new
                        {
                            Id = new Guid("812278b7-4a34-45f2-aba1-c7c85c11e49a"),
                            CityImagePath = "",
                            CityName = "Гавана",
                            CountryId = new Guid("ba9ded7d-1d47-446b-8933-0f9ad5bff6c2"),
                            IsCapital = true,
                            NormalizedName = "HAVANA"
                        },
                        new
                        {
                            Id = new Guid("9e1e1f9c-1454-4a2c-b95a-052cecf5e32f"),
                            CityImagePath = "",
                            CityName = "Санктьяго-де-Куба",
                            CountryId = new Guid("ba9ded7d-1d47-446b-8933-0f9ad5bff6c2"),
                            IsCapital = false,
                            NormalizedName = "SANTIAGO_DE_CUBA"
                        },
                        new
                        {
                            Id = new Guid("e6a5ac5a-e154-442f-9ba0-504b2ba32896"),
                            CityImagePath = "",
                            CityName = "Камагуэй",
                            CountryId = new Guid("ba9ded7d-1d47-446b-8933-0f9ad5bff6c2"),
                            IsCapital = false,
                            NormalizedName = "CAMAGUEY"
                        },
                        new
                        {
                            Id = new Guid("970804c8-290a-4a33-bef0-72f216a1bd2b"),
                            CityImagePath = "",
                            CityName = "Ольгин",
                            CountryId = new Guid("ba9ded7d-1d47-446b-8933-0f9ad5bff6c2"),
                            IsCapital = false,
                            NormalizedName = "OLGUIN"
                        },
                        new
                        {
                            Id = new Guid("55131410-6cb5-47ce-b5dd-f1356fd0d360"),
                            CityImagePath = "",
                            CityName = "Берн",
                            CountryId = new Guid("246926cd-cdf0-48e3-a81a-65f9a71fca82"),
                            IsCapital = true,
                            NormalizedName = "BERNE"
                        },
                        new
                        {
                            Id = new Guid("1a5ca3bb-6652-4718-af3f-40548971ae6f"),
                            CityImagePath = "",
                            CityName = "Цюрих",
                            CountryId = new Guid("246926cd-cdf0-48e3-a81a-65f9a71fca82"),
                            IsCapital = false,
                            NormalizedName = "ZURICH"
                        },
                        new
                        {
                            Id = new Guid("2a8f825e-8197-477f-ae0c-cc1a3496b554"),
                            CityImagePath = "",
                            CityName = "Женева",
                            CountryId = new Guid("246926cd-cdf0-48e3-a81a-65f9a71fca82"),
                            IsCapital = false,
                            NormalizedName = "GENEVA"
                        },
                        new
                        {
                            Id = new Guid("1a87070c-e8bd-4ae1-899a-c63041eb4ea6"),
                            CityImagePath = "",
                            CityName = "Базель",
                            CountryId = new Guid("246926cd-cdf0-48e3-a81a-65f9a71fca82"),
                            IsCapital = false,
                            NormalizedName = "BASEL"
                        },
                        new
                        {
                            Id = new Guid("985d1ad5-79e6-44ab-9318-d42b14e9cb29"),
                            CityImagePath = "",
                            CityName = "Лондон",
                            CountryId = new Guid("414e4073-332f-4737-8b4e-794201d8d457"),
                            IsCapital = true,
                            NormalizedName = "LONDON"
                        },
                        new
                        {
                            Id = new Guid("ee813db6-729c-47e6-b08d-ea54a3af0bb5"),
                            CityImagePath = "",
                            CityName = "Бирмингем",
                            CountryId = new Guid("414e4073-332f-4737-8b4e-794201d8d457"),
                            IsCapital = false,
                            NormalizedName = "BIRMINGHAM"
                        },
                        new
                        {
                            Id = new Guid("214e1d18-e583-4ca5-98cb-0b3f4f789a10"),
                            CityImagePath = "",
                            CityName = "Глазго",
                            CountryId = new Guid("414e4073-332f-4737-8b4e-794201d8d457"),
                            IsCapital = false,
                            NormalizedName = "GLASGOW"
                        },
                        new
                        {
                            Id = new Guid("1b02c572-2104-4a2a-b001-811798e518ed"),
                            CityImagePath = "",
                            CityName = "Манчестер",
                            CountryId = new Guid("414e4073-332f-4737-8b4e-794201d8d457"),
                            IsCapital = false,
                            NormalizedName = "MANCHESTER"
                        });
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CountryPattern", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlagImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CountryPatterns", "Game");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd710db7-4d24-400d-b0bf-c384a2e239f7"),
                            CountryName = "Россия",
                            FlagImagePath = "",
                            NormalizedName = "RUSSIA"
                        },
                        new
                        {
                            Id = new Guid("13b6d9e9-8265-491a-9ba2-b4d51ad1d3d3"),
                            CountryName = "Китай",
                            FlagImagePath = "",
                            NormalizedName = "CHINA"
                        },
                        new
                        {
                            Id = new Guid("2ff83963-3a38-4abb-b517-cbcabf83dd98"),
                            CountryName = "Япония",
                            FlagImagePath = "",
                            NormalizedName = "JAPAN"
                        },
                        new
                        {
                            Id = new Guid("d297f886-103b-47fa-857b-a0ad62783d76"),
                            CountryName = "Германия",
                            FlagImagePath = "",
                            NormalizedName = "GERMANY"
                        },
                        new
                        {
                            Id = new Guid("6b8d3ed1-a6ea-4e54-b13a-5d14389de559"),
                            CountryName = "Франция",
                            FlagImagePath = "",
                            NormalizedName = "FRANCE"
                        },
                        new
                        {
                            Id = new Guid("c5c01588-fa4b-48aa-9b7e-98d1e4f57083"),
                            CountryName = "США",
                            FlagImagePath = "",
                            NormalizedName = "UNITED_STATES"
                        },
                        new
                        {
                            Id = new Guid("9220d8c5-fea4-4d84-a721-eef29cc2ef81"),
                            CountryName = "Северная Корея",
                            FlagImagePath = "",
                            NormalizedName = "NORTH_KOREA"
                        },
                        new
                        {
                            Id = new Guid("6ec744de-3239-43af-b8ab-723874e209cd"),
                            CountryName = "Иран",
                            FlagImagePath = "",
                            NormalizedName = "IRAN"
                        },
                        new
                        {
                            Id = new Guid("ba9ded7d-1d47-446b-8933-0f9ad5bff6c2"),
                            CountryName = "Куба",
                            FlagImagePath = "",
                            NormalizedName = "CUBA"
                        },
                        new
                        {
                            Id = new Guid("246926cd-cdf0-48e3-a81a-65f9a71fca82"),
                            CountryName = "Швейцария",
                            FlagImagePath = "",
                            NormalizedName = "SWITZERLAND"
                        },
                        new
                        {
                            Id = new Guid("414e4073-332f-4737-8b4e-794201d8d457"),
                            CountryName = "Великобритания",
                            FlagImagePath = "",
                            NormalizedName = "GREAT_BRITAIN"
                        });
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Organizer", b =>
                {
                    b.HasBaseType("Game.Domain.DomainModels.Rooms.Entities.RoomMember");

                    b.HasDiscriminator().HasValue("Organizer");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Player", b =>
                {
                    b.HasBaseType("Game.Domain.DomainModels.Rooms.Entities.RoomMember");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.City", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Country", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Game", "Game")
                        .WithMany("Countries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.Room", "Room")
                        .WithMany("Countries")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Game", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.Room", "Room")
                        .WithOne("DomainGame")
                        .HasForeignKey("Game.Domain.DomainModels.Games.Entities.Game", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Sanction", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Audience")
                        .WithMany()
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Issuser")
                        .WithMany("Sanctions")
                        .HasForeignKey("IssuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("Issuser");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Room", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Users.Entities.GameUser", "Creator")
                        .WithMany("Rooms")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.RoomMember", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Country")
                        .WithMany("Players")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Game.Domain.DomainModels.Users.Entities.GameUser", "GameUser")
                        .WithMany("CreatedMembers")
                        .HasForeignKey("GameUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.Room", "Room")
                        .WithMany("RoomMembers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("GameUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CityPattern", b =>
                {
                    b.HasOne("Game.Infrastructure.Seed.CountryPattern", "CountryPattern")
                        .WithMany("CityPatterns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryPattern");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Players");

                    b.Navigation("Sanctions");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Game", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Room", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("DomainGame")
                        .IsRequired();

                    b.Navigation("RoomMembers");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Users.Entities.GameUser", b =>
                {
                    b.Navigation("CreatedMembers");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CountryPattern", b =>
                {
                    b.Navigation("CityPatterns");
                });
#pragma warning restore 612, 618
        }
    }
}

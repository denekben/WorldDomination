// <auto-generated />
using System;
using Game.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Game.Infrastructure.Migrations
{
    [DbContext(typeof(GameWriteDbContext))]
    [Migration("20250121140705_AddedGameEventsGameWrite")]
    partial class AddedGameEventsGameWrite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Game")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CityImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<int>("DevelopmentLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("HaveShield")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("boolean");

                    b.Property<int>("LivingLevel")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("BadEventQuantity")
                        .HasColumnType("bigint");

                    b.Property<int>("Budget")
                        .HasColumnType("integer");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlagImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<long>("GoodEventQuantity")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasAppliedOrder")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasValidatedOrder")
                        .HasColumnType("boolean");

                    b.Property<bool>("HaveNuclearTechnology")
                        .HasColumnType("boolean");

                    b.Property<int>("Income")
                        .HasColumnType("integer");

                    b.Property<int>("LivingLevel")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NuclearTechnology")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("RoomId");

                    b.ToTable("Countries", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Game", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("integer");

                    b.Property<int>("EcologyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("GameState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasGameStateTimer")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasTeams")
                        .HasColumnType("boolean");

                    b.Property<int>("RoundQuantity")
                        .HasColumnType("integer");

                    b.HasKey("RoomId");

                    b.ToTable("Games", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.GameEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameEvents", "Game");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66342116-f15f-4b0d-88e0-2dc7734f5836"),
                            Description = "Ваши города получают -5% развития",
                            Quality = "Bad",
                            Title = "Градостроительные ошибки"
                        },
                        new
                        {
                            Id = new Guid("9678f93b-d902-4f42-89e0-42e96f026504"),
                            Description = "В этот ход доход от ваших городов снижен на 15%",
                            Quality = "Bad",
                            Title = "Стагфляция"
                        },
                        new
                        {
                            Id = new Guid("afb742d5-d289-4c05-afee-276962cf9fdc"),
                            Description = "Вы теряете 200 у.е. из вашего бюджета",
                            Quality = "Bad",
                            Title = "Дефолт"
                        },
                        new
                        {
                            Id = new Guid("cec58c04-84de-47aa-9a46-b6bbc929bce4"),
                            Description = "Вы теряете 1 ядерную боеголовку",
                            Quality = "Bad",
                            Title = "Военные хищения"
                        },
                        new
                        {
                            Id = new Guid("6fcd872d-48e7-4bc7-b54b-996a0eef92ca"),
                            Description = "В этот ход штраф от наложенных на вас санкций увеличен на 50%",
                            Quality = "Bad",
                            Title = "Международная изоляция"
                        },
                        new
                        {
                            Id = new Guid("07c77b0e-bb68-45c8-9246-0e1d7a97f123"),
                            Description = "Ваши города получают +5% развития",
                            Quality = "Good",
                            Title = "Урбанизация"
                        },
                        new
                        {
                            Id = new Guid("989580df-0699-4912-9deb-db71b4d50882"),
                            Description = "В этот ход доход от ваших городов увеличен на 15%",
                            Quality = "Good",
                            Title = "Особая экономическая зона"
                        },
                        new
                        {
                            Id = new Guid("35a3b45e-c800-40f2-b3b4-6670b57b439e"),
                            Description = "Ваш бюджет пополнен на 200 у.е.",
                            Quality = "Good",
                            Title = "Рост экономики"
                        },
                        new
                        {
                            Id = new Guid("7c49824a-a1e6-4074-8542-f10bbc61fdbf"),
                            Description = "Один из ваших городов получает щит",
                            Quality = "Good",
                            Title = "Военная реформа"
                        },
                        new
                        {
                            Id = new Guid("17e71560-6bee-49ba-9740-279814a4b35c"),
                            Description = "В этот ход штраф от наложенных на вас санкций уменьшен на 50%",
                            Quality = "Good",
                            Title = "Суверенитет"
                        });
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Order", b =>
                {
                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<int>("BombsToBuyQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("CitiesToDevelop")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CitiesToSetShield")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CitiesToStrike")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountriesToDonate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountriesToSetSanctions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DevelopEcologyProgram")
                        .HasColumnType("boolean");

                    b.Property<bool>("DevelopNuclearTechology")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("CountryId");

                    b.ToTable("Orders", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Sanction", b =>
                {
                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudienceId")
                        .HasColumnType("uuid");

                    b.Property<int>("SanctionPower")
                        .HasColumnType("integer");

                    b.HasKey("IssuerId", "AudienceId");

                    b.HasIndex("AudienceId");

                    b.ToTable("Sanctions", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuerGameUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuerRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("NegotiationChatId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NegotiationChatId");

                    b.HasIndex("IssuerGameUserId", "IssuerRoomId");

                    b.ToTable("Messages", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.NegotiationChat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstCountryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondCountryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FirstCountryId");

                    b.HasIndex("SecondCountryId");

                    b.ToTable("NegotiationChats", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.NegotiationRequest", b =>
                {
                    b.Property<Guid>("IssuerCountryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudienceCountryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuerMemberId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("boolean");

                    b.HasKey("IssuerCountryId", "AudienceCountryId", "IssuerMemberId");

                    b.HasIndex("AudienceCountryId");

                    b.ToTable("NegotiationRequests", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("CountryLimit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2025, 1, 21, 14, 7, 5, 506, DateTimeKind.Utc).AddTicks(2158));

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasTeams")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGameActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("RoomCode")
                        .HasColumnType("text");

                    b.Property<int>("RoomMemberLimit")
                        .HasColumnType("integer");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoundQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Rooms", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.RoomMember", b =>
                {
                    b.Property<Guid>("GameUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("GameRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoomMemberRole")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("GameUserId", "RoomId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomMembers", "Game");

                    b.HasDiscriminator<string>("RoomMemberRole").HasValue("RoomMember");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Users.Entities.GameUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameUsers", "Game");
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CityPattern", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CityImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCapital")
                        .HasColumnType("boolean");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CityPatterns", "Game");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04660a73-008b-4999-a859-a319c197822a"),
                            CityImagePath = "",
                            CityName = "Москва",
                            CountryId = new Guid("028e8525-ae87-4881-b322-acbe528e062b"),
                            IsCapital = true,
                            NormalizedName = "MOSCOW"
                        },
                        new
                        {
                            Id = new Guid("44ae2060-247d-4ef8-92ad-0dae29969296"),
                            CityImagePath = "",
                            CityName = "Санкт-Петербург",
                            CountryId = new Guid("028e8525-ae87-4881-b322-acbe528e062b"),
                            IsCapital = false,
                            NormalizedName = "SAINT_PETERSBURG"
                        },
                        new
                        {
                            Id = new Guid("05e348fc-86d2-4493-8707-97210f979630"),
                            CityImagePath = "",
                            CityName = "Екатеринбург",
                            CountryId = new Guid("028e8525-ae87-4881-b322-acbe528e062b"),
                            IsCapital = false,
                            NormalizedName = "YEKATERINBURG"
                        },
                        new
                        {
                            Id = new Guid("e7e2ad4d-2081-483b-9c61-6456eca36ce4"),
                            CityImagePath = "",
                            CityName = "Новосибирск",
                            CountryId = new Guid("028e8525-ae87-4881-b322-acbe528e062b"),
                            IsCapital = false,
                            NormalizedName = "NOVOSIBIRSK"
                        },
                        new
                        {
                            Id = new Guid("0808373a-0063-454c-a012-2b08365d5191"),
                            CityImagePath = "",
                            CityName = "Пекин",
                            CountryId = new Guid("d8aaa31e-b6c0-42eb-b393-5a40d3bfbf10"),
                            IsCapital = true,
                            NormalizedName = "BEIJING"
                        },
                        new
                        {
                            Id = new Guid("9ae32367-b8d1-4446-939f-0d3b3bff4b14"),
                            CityImagePath = "",
                            CityName = "Шанхай",
                            CountryId = new Guid("d8aaa31e-b6c0-42eb-b393-5a40d3bfbf10"),
                            IsCapital = false,
                            NormalizedName = "SHANGHAI"
                        },
                        new
                        {
                            Id = new Guid("c8e281bd-4169-48de-94b7-4b974dbde76f"),
                            CityImagePath = "",
                            CityName = "Чунцин",
                            CountryId = new Guid("d8aaa31e-b6c0-42eb-b393-5a40d3bfbf10"),
                            IsCapital = false,
                            NormalizedName = "CHONGQING"
                        },
                        new
                        {
                            Id = new Guid("ddc795c6-c95b-43ea-a4e3-b80ae568dff7"),
                            CityImagePath = "",
                            CityName = "Тяньцзинь",
                            CountryId = new Guid("d8aaa31e-b6c0-42eb-b393-5a40d3bfbf10"),
                            IsCapital = false,
                            NormalizedName = "TIANJIN"
                        },
                        new
                        {
                            Id = new Guid("5cd0f530-26f2-421c-af93-fe10f3c4b8c2"),
                            CityImagePath = "",
                            CityName = "Токио",
                            CountryId = new Guid("cd92490a-df56-45e0-b9d4-70ca2308a14b"),
                            IsCapital = true,
                            NormalizedName = "TOKYO"
                        },
                        new
                        {
                            Id = new Guid("3df955fe-1ad5-4f96-a6b6-c323ee6980b6"),
                            CityImagePath = "",
                            CityName = "Йокогама",
                            CountryId = new Guid("cd92490a-df56-45e0-b9d4-70ca2308a14b"),
                            IsCapital = false,
                            NormalizedName = "YOKOHAMA"
                        },
                        new
                        {
                            Id = new Guid("1f43d38f-8685-44d6-ab8d-364c968408ff"),
                            CityImagePath = "",
                            CityName = "Осака",
                            CountryId = new Guid("cd92490a-df56-45e0-b9d4-70ca2308a14b"),
                            IsCapital = false,
                            NormalizedName = "OSAKA"
                        },
                        new
                        {
                            Id = new Guid("169616f5-4397-4336-862c-9e0d30272a78"),
                            CityImagePath = "",
                            CityName = "Нагоя",
                            CountryId = new Guid("cd92490a-df56-45e0-b9d4-70ca2308a14b"),
                            IsCapital = false,
                            NormalizedName = "NAGOYA"
                        },
                        new
                        {
                            Id = new Guid("5b199c8d-a915-4182-8a76-91998402d41b"),
                            CityImagePath = "",
                            CityName = "Берлин",
                            CountryId = new Guid("7c6c9f3b-4ca6-4320-9073-29706a4668d8"),
                            IsCapital = false,
                            NormalizedName = "BERLIN"
                        },
                        new
                        {
                            Id = new Guid("a555410c-ed5a-4d41-85b3-4e96d7404369"),
                            CityImagePath = "",
                            CityName = "Гамбург",
                            CountryId = new Guid("7c6c9f3b-4ca6-4320-9073-29706a4668d8"),
                            IsCapital = false,
                            NormalizedName = "HAMBURG"
                        },
                        new
                        {
                            Id = new Guid("274db1d4-f8ab-42c5-9c22-edd66191b586"),
                            CityImagePath = "",
                            CityName = "Мюнхен",
                            CountryId = new Guid("7c6c9f3b-4ca6-4320-9073-29706a4668d8"),
                            IsCapital = false,
                            NormalizedName = "MUNICH"
                        },
                        new
                        {
                            Id = new Guid("b9279afb-17fc-48be-bea3-3395f216ae24"),
                            CityImagePath = "",
                            CityName = "Кёльн",
                            CountryId = new Guid("7c6c9f3b-4ca6-4320-9073-29706a4668d8"),
                            IsCapital = false,
                            NormalizedName = "COLOGNE"
                        },
                        new
                        {
                            Id = new Guid("768c476f-aa3b-4e43-8e55-8291ec52d5cc"),
                            CityImagePath = "",
                            CityName = "Париж",
                            CountryId = new Guid("15282082-82e5-4a52-8522-bc386b004ba0"),
                            IsCapital = true,
                            NormalizedName = "PARIS"
                        },
                        new
                        {
                            Id = new Guid("5058e1a8-19e9-4d55-90d6-1947b6d5cd3e"),
                            CityImagePath = "",
                            CityName = "Марсель",
                            CountryId = new Guid("15282082-82e5-4a52-8522-bc386b004ba0"),
                            IsCapital = false,
                            NormalizedName = "MARSEILLE"
                        },
                        new
                        {
                            Id = new Guid("349483ac-777c-413a-9aaf-b546c63fee9e"),
                            CityImagePath = "",
                            CityName = "Лион",
                            CountryId = new Guid("15282082-82e5-4a52-8522-bc386b004ba0"),
                            IsCapital = false,
                            NormalizedName = "LYON"
                        },
                        new
                        {
                            Id = new Guid("0e3dd5c4-9641-43e8-85bb-d371c8e89092"),
                            CityImagePath = "",
                            CityName = "Тулуза",
                            CountryId = new Guid("15282082-82e5-4a52-8522-bc386b004ba0"),
                            IsCapital = false,
                            NormalizedName = "TOULOUSE"
                        },
                        new
                        {
                            Id = new Guid("f22c1c19-9083-4899-96a2-e20b6be3fc36"),
                            CityImagePath = "",
                            CityName = "Вашингтон",
                            CountryId = new Guid("3a0c1ef3-5059-4f93-a032-583b065c2b01"),
                            IsCapital = true,
                            NormalizedName = "WASHINGTON"
                        },
                        new
                        {
                            Id = new Guid("657c2a28-e193-4e31-946f-7e24b5632fff"),
                            CityImagePath = "",
                            CityName = "Нью-Йорк",
                            CountryId = new Guid("3a0c1ef3-5059-4f93-a032-583b065c2b01"),
                            IsCapital = false,
                            NormalizedName = "NEW_YORK_CITY"
                        },
                        new
                        {
                            Id = new Guid("4aefbec9-fdf0-4aa0-8adb-15453bd6e361"),
                            CityImagePath = "",
                            CityName = "Лос-Анджелес",
                            CountryId = new Guid("3a0c1ef3-5059-4f93-a032-583b065c2b01"),
                            IsCapital = false,
                            NormalizedName = "LOS_ANGELES"
                        },
                        new
                        {
                            Id = new Guid("6be56b8e-90ea-408b-9fb0-813623cd3e19"),
                            CityImagePath = "",
                            CityName = "Чикаго",
                            CountryId = new Guid("3a0c1ef3-5059-4f93-a032-583b065c2b01"),
                            IsCapital = false,
                            NormalizedName = "CHICAGO"
                        },
                        new
                        {
                            Id = new Guid("cdf4e9bf-2035-4f6f-b780-297f63c5ffd2"),
                            CityImagePath = "",
                            CityName = "Пхеньян",
                            CountryId = new Guid("cfc5ecbe-376b-494c-95b8-efc85c948837"),
                            IsCapital = true,
                            NormalizedName = "PYONGYANG"
                        },
                        new
                        {
                            Id = new Guid("1690e252-e1a4-4310-ad60-511dbaaaed0d"),
                            CityImagePath = "",
                            CityName = "Хамхын",
                            CountryId = new Guid("cfc5ecbe-376b-494c-95b8-efc85c948837"),
                            IsCapital = false,
                            NormalizedName = "HAMHUNG"
                        },
                        new
                        {
                            Id = new Guid("b57c8107-6905-4421-934d-abd9d5298462"),
                            CityImagePath = "",
                            CityName = "Чхонджин",
                            CountryId = new Guid("cfc5ecbe-376b-494c-95b8-efc85c948837"),
                            IsCapital = false,
                            NormalizedName = "CHONJIN"
                        },
                        new
                        {
                            Id = new Guid("a2aa7bb1-5318-418c-b179-d3f917a02c9b"),
                            CityImagePath = "",
                            CityName = "Нампхо",
                            CountryId = new Guid("cfc5ecbe-376b-494c-95b8-efc85c948837"),
                            IsCapital = false,
                            NormalizedName = "NAMPO"
                        },
                        new
                        {
                            Id = new Guid("8ff8eb14-8102-4c84-963b-f27e7b3ca3a7"),
                            CityImagePath = "",
                            CityName = "Тегеран",
                            CountryId = new Guid("ebcebe37-7b56-4fca-90b0-61ac5085bb91"),
                            IsCapital = true,
                            NormalizedName = "TEHRAN"
                        },
                        new
                        {
                            Id = new Guid("6a0ff31e-86fc-4859-97f2-dce6e2cba8e3"),
                            CityImagePath = "",
                            CityName = "Мешхед",
                            CountryId = new Guid("ebcebe37-7b56-4fca-90b0-61ac5085bb91"),
                            IsCapital = false,
                            NormalizedName = "MASHHAD"
                        },
                        new
                        {
                            Id = new Guid("acf80edd-179a-46fd-9fa8-3415a7a49937"),
                            CityImagePath = "",
                            CityName = "Исфахан",
                            CountryId = new Guid("ebcebe37-7b56-4fca-90b0-61ac5085bb91"),
                            IsCapital = false,
                            NormalizedName = "ISFAHAN"
                        },
                        new
                        {
                            Id = new Guid("6557e962-cb81-4c2c-b035-7c7898610a65"),
                            CityImagePath = "",
                            CityName = "Кередж",
                            CountryId = new Guid("ebcebe37-7b56-4fca-90b0-61ac5085bb91"),
                            IsCapital = false,
                            NormalizedName = "KARAJ"
                        },
                        new
                        {
                            Id = new Guid("42f4e9ab-b8c3-43b4-8d7a-93f813f155e1"),
                            CityImagePath = "",
                            CityName = "Гавана",
                            CountryId = new Guid("5f06fd54-f480-4837-b3eb-c07cd651b39e"),
                            IsCapital = true,
                            NormalizedName = "HAVANA"
                        },
                        new
                        {
                            Id = new Guid("f6994cf4-9977-417f-9813-381d7ad8a783"),
                            CityImagePath = "",
                            CityName = "Санктьяго-де-Куба",
                            CountryId = new Guid("5f06fd54-f480-4837-b3eb-c07cd651b39e"),
                            IsCapital = false,
                            NormalizedName = "SANTIAGO_DE_CUBA"
                        },
                        new
                        {
                            Id = new Guid("e08a34d7-f6cd-47c6-ac7e-c83a7f567aeb"),
                            CityImagePath = "",
                            CityName = "Камагуэй",
                            CountryId = new Guid("5f06fd54-f480-4837-b3eb-c07cd651b39e"),
                            IsCapital = false,
                            NormalizedName = "CAMAGUEY"
                        },
                        new
                        {
                            Id = new Guid("4f05ae1b-3b68-4eb1-aa8f-279c4f122368"),
                            CityImagePath = "",
                            CityName = "Ольгин",
                            CountryId = new Guid("5f06fd54-f480-4837-b3eb-c07cd651b39e"),
                            IsCapital = false,
                            NormalizedName = "OLGUIN"
                        },
                        new
                        {
                            Id = new Guid("c24cd33e-2c29-4050-b294-a8399b422b85"),
                            CityImagePath = "",
                            CityName = "Берн",
                            CountryId = new Guid("430a6a46-87a2-4c09-ab79-1f1409ad3cbb"),
                            IsCapital = true,
                            NormalizedName = "BERNE"
                        },
                        new
                        {
                            Id = new Guid("0f31774f-ba34-4de0-a620-310f1570c756"),
                            CityImagePath = "",
                            CityName = "Цюрих",
                            CountryId = new Guid("430a6a46-87a2-4c09-ab79-1f1409ad3cbb"),
                            IsCapital = false,
                            NormalizedName = "ZURICH"
                        },
                        new
                        {
                            Id = new Guid("63b9fba0-fce1-4b9a-9d2e-56ea544971be"),
                            CityImagePath = "",
                            CityName = "Женева",
                            CountryId = new Guid("430a6a46-87a2-4c09-ab79-1f1409ad3cbb"),
                            IsCapital = false,
                            NormalizedName = "GENEVA"
                        },
                        new
                        {
                            Id = new Guid("28181e79-59c4-47d6-ab96-34eef49de2fe"),
                            CityImagePath = "",
                            CityName = "Базель",
                            CountryId = new Guid("430a6a46-87a2-4c09-ab79-1f1409ad3cbb"),
                            IsCapital = false,
                            NormalizedName = "BASEL"
                        },
                        new
                        {
                            Id = new Guid("ef534f80-86f0-47a6-b834-ff405070cdce"),
                            CityImagePath = "",
                            CityName = "Лондон",
                            CountryId = new Guid("2dad924e-6c9d-4b5b-8f40-42b4b4aa2a75"),
                            IsCapital = true,
                            NormalizedName = "LONDON"
                        },
                        new
                        {
                            Id = new Guid("9fd68d08-8af7-4d74-85b8-f992b78c232a"),
                            CityImagePath = "",
                            CityName = "Бирмингем",
                            CountryId = new Guid("2dad924e-6c9d-4b5b-8f40-42b4b4aa2a75"),
                            IsCapital = false,
                            NormalizedName = "BIRMINGHAM"
                        },
                        new
                        {
                            Id = new Guid("f71634c2-2575-4241-89cb-c6de2ef416e4"),
                            CityImagePath = "",
                            CityName = "Глазго",
                            CountryId = new Guid("2dad924e-6c9d-4b5b-8f40-42b4b4aa2a75"),
                            IsCapital = false,
                            NormalizedName = "GLASGOW"
                        },
                        new
                        {
                            Id = new Guid("00c9ebb1-dbc9-40a2-85c8-c48cf504e3ea"),
                            CityImagePath = "",
                            CityName = "Манчестер",
                            CountryId = new Guid("2dad924e-6c9d-4b5b-8f40-42b4b4aa2a75"),
                            IsCapital = false,
                            NormalizedName = "MANCHESTER"
                        });
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CountryPattern", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlagImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CountryPatterns", "Game");

                    b.HasData(
                        new
                        {
                            Id = new Guid("028e8525-ae87-4881-b322-acbe528e062b"),
                            CountryName = "Россия",
                            FlagImagePath = "",
                            NormalizedName = "RUSSIA"
                        },
                        new
                        {
                            Id = new Guid("d8aaa31e-b6c0-42eb-b393-5a40d3bfbf10"),
                            CountryName = "Китай",
                            FlagImagePath = "",
                            NormalizedName = "CHINA"
                        },
                        new
                        {
                            Id = new Guid("cd92490a-df56-45e0-b9d4-70ca2308a14b"),
                            CountryName = "Япония",
                            FlagImagePath = "",
                            NormalizedName = "JAPAN"
                        },
                        new
                        {
                            Id = new Guid("7c6c9f3b-4ca6-4320-9073-29706a4668d8"),
                            CountryName = "Германия",
                            FlagImagePath = "",
                            NormalizedName = "GERMANY"
                        },
                        new
                        {
                            Id = new Guid("15282082-82e5-4a52-8522-bc386b004ba0"),
                            CountryName = "Франция",
                            FlagImagePath = "",
                            NormalizedName = "FRANCE"
                        },
                        new
                        {
                            Id = new Guid("3a0c1ef3-5059-4f93-a032-583b065c2b01"),
                            CountryName = "США",
                            FlagImagePath = "",
                            NormalizedName = "UNITED_STATES"
                        },
                        new
                        {
                            Id = new Guid("cfc5ecbe-376b-494c-95b8-efc85c948837"),
                            CountryName = "Северная Корея",
                            FlagImagePath = "",
                            NormalizedName = "NORTH_KOREA"
                        },
                        new
                        {
                            Id = new Guid("ebcebe37-7b56-4fca-90b0-61ac5085bb91"),
                            CountryName = "Иран",
                            FlagImagePath = "",
                            NormalizedName = "IRAN"
                        },
                        new
                        {
                            Id = new Guid("5f06fd54-f480-4837-b3eb-c07cd651b39e"),
                            CountryName = "Куба",
                            FlagImagePath = "",
                            NormalizedName = "CUBA"
                        },
                        new
                        {
                            Id = new Guid("430a6a46-87a2-4c09-ab79-1f1409ad3cbb"),
                            CountryName = "Швейцария",
                            FlagImagePath = "",
                            NormalizedName = "SWITZERLAND"
                        },
                        new
                        {
                            Id = new Guid("2dad924e-6c9d-4b5b-8f40-42b4b4aa2a75"),
                            CountryName = "Великобритания",
                            FlagImagePath = "",
                            NormalizedName = "GREAT_BRITAIN"
                        });
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Organizer", b =>
                {
                    b.HasBaseType("Game.Domain.DomainModels.Rooms.Entities.RoomMember");

                    b.HasDiscriminator().HasValue("Organizer");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Player", b =>
                {
                    b.HasBaseType("Game.Domain.DomainModels.Rooms.Entities.RoomMember");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.City", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Country", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Game", "Game")
                        .WithMany("Countries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.Room", "Room")
                        .WithMany("Countries")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Game", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.Room", "Room")
                        .WithOne("DomainGame")
                        .HasForeignKey("Game.Domain.DomainModels.Games.Entities.Game", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Order", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Country")
                        .WithOne("Order")
                        .HasForeignKey("Game.Domain.DomainModels.Games.Entities.Order", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Sanction", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Audience")
                        .WithMany("IncomingSanctions")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Issuer")
                        .WithMany("OutgoingSanctions")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.Message", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Messaging.Entities.NegotiationChat", null)
                        .WithMany("Messages")
                        .HasForeignKey("NegotiationChatId");

                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.RoomMember", "Issuer")
                        .WithMany("Messages")
                        .HasForeignKey("IssuerGameUserId", "IssuerRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.NegotiationChat", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "FirstCountry")
                        .WithMany()
                        .HasForeignKey("FirstCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "SecondCountry")
                        .WithMany()
                        .HasForeignKey("SecondCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstCountry");

                    b.Navigation("SecondCountry");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.NegotiationRequest", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Audience")
                        .WithMany("IncomingRequests")
                        .HasForeignKey("AudienceCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Issuer")
                        .WithMany("OutgoingRequests")
                        .HasForeignKey("IssuerCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Room", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Users.Entities.GameUser", "Creator")
                        .WithMany("Rooms")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.RoomMember", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Country")
                        .WithMany("Players")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Game.Domain.DomainModels.Users.Entities.GameUser", "GameUser")
                        .WithMany("CreatedMembers")
                        .HasForeignKey("GameUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.Room", "Room")
                        .WithMany("RoomMembers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("GameUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CityPattern", b =>
                {
                    b.HasOne("Game.Infrastructure.Seed.CountryPattern", "CountryPattern")
                        .WithMany("CityPatterns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryPattern");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("IncomingRequests");

                    b.Navigation("IncomingSanctions");

                    b.Navigation("Order")
                        .IsRequired();

                    b.Navigation("OutgoingRequests");

                    b.Navigation("OutgoingSanctions");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Game", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.NegotiationChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Room", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("DomainGame")
                        .IsRequired();

                    b.Navigation("RoomMembers");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.RoomMember", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Users.Entities.GameUser", b =>
                {
                    b.Navigation("CreatedMembers");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CountryPattern", b =>
                {
                    b.Navigation("CityPatterns");
                });
#pragma warning restore 612, 618
        }
    }
}

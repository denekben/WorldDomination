// <auto-generated />
using System;
using Game.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Game.Infrastructure.Migrations
{
    [DbContext(typeof(GameWriteDbContext))]
    partial class GameWriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Game")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CityImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<int>("DevelopmentLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("HaveShield")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("boolean");

                    b.Property<int>("LivingLevel")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Budget")
                        .HasColumnType("integer");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlagImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasAppliedOrder")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasValidatedOrder")
                        .HasColumnType("boolean");

                    b.Property<bool>("HaveNuclearTechnology")
                        .HasColumnType("boolean");

                    b.Property<int>("Income")
                        .HasColumnType("integer");

                    b.Property<int>("LivingLevel")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NuclearTechnology")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("RoomId");

                    b.ToTable("Countries", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Game", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("integer");

                    b.Property<int>("EcologyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("GameState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasGameStateTimer")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasTeams")
                        .HasColumnType("boolean");

                    b.Property<int>("RoundQuantity")
                        .HasColumnType("integer");

                    b.HasKey("RoomId");

                    b.ToTable("Games", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Order", b =>
                {
                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<int>("BombsToBuyQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("CitiesToDevelop")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CitiesToSetShield")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CitiesToStrike")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountriesToDonate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountriesToSetSanctions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DevelopEcologyProgram")
                        .HasColumnType("boolean");

                    b.Property<bool>("DevelopNuclearTechology")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("CountryId");

                    b.ToTable("Orders", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Sanction", b =>
                {
                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudienceId")
                        .HasColumnType("uuid");

                    b.Property<float>("SanctionPower")
                        .HasColumnType("real");

                    b.HasKey("IssuerId", "AudienceId");

                    b.HasIndex("AudienceId");

                    b.ToTable("Sanctions", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuerGameUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuerRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("NegotiationChatId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NegotiationChatId");

                    b.HasIndex("IssuerGameUserId", "IssuerRoomId");

                    b.ToTable("Messages", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.NegotiationChat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstCountryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondCountryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FirstCountryId");

                    b.HasIndex("SecondCountryId");

                    b.ToTable("NegotiationChats", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.NegotiationRequest", b =>
                {
                    b.Property<Guid>("IssuerCountryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudienceCountryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuerMemberId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("boolean");

                    b.HasKey("IssuerCountryId", "AudienceCountryId", "IssuerMemberId");

                    b.HasIndex("AudienceCountryId");

                    b.ToTable("NegotiationRequests", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("CountryLimit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2025, 1, 20, 0, 51, 2, 451, DateTimeKind.Utc).AddTicks(55));

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasTeams")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGameActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("RoomCode")
                        .HasColumnType("text");

                    b.Property<int>("RoomMemberLimit")
                        .HasColumnType("integer");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoundQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Rooms", "Game");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.RoomMember", b =>
                {
                    b.Property<Guid>("GameUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("GameRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoomMemberRole")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("GameUserId", "RoomId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomMembers", "Game");

                    b.HasDiscriminator<string>("RoomMemberRole").HasValue("RoomMember");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Users.Entities.GameUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameUsers", "Game");
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CityPattern", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CityImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCapital")
                        .HasColumnType("boolean");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CityPatterns", "Game");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a4c5f15-b5bc-4ac9-9abc-a94e00585fa7"),
                            CityImagePath = "",
                            CityName = "Москва",
                            CountryId = new Guid("00a2bc79-71ff-49b1-ab95-3e9e56a8ca48"),
                            IsCapital = true,
                            NormalizedName = "MOSCOW"
                        },
                        new
                        {
                            Id = new Guid("a44c89c3-2e2e-4bd1-bfeb-076b68ee0024"),
                            CityImagePath = "",
                            CityName = "Санкт-Петербург",
                            CountryId = new Guid("00a2bc79-71ff-49b1-ab95-3e9e56a8ca48"),
                            IsCapital = false,
                            NormalizedName = "SAINT_PETERSBURG"
                        },
                        new
                        {
                            Id = new Guid("63786dc1-e570-451d-b07f-eb007c78ad71"),
                            CityImagePath = "",
                            CityName = "Екатеринбург",
                            CountryId = new Guid("00a2bc79-71ff-49b1-ab95-3e9e56a8ca48"),
                            IsCapital = false,
                            NormalizedName = "YEKATERINBURG"
                        },
                        new
                        {
                            Id = new Guid("6166f01b-9414-4ece-a832-7bb4fe2a7db1"),
                            CityImagePath = "",
                            CityName = "Новосибирск",
                            CountryId = new Guid("00a2bc79-71ff-49b1-ab95-3e9e56a8ca48"),
                            IsCapital = false,
                            NormalizedName = "NOVOSIBIRSK"
                        },
                        new
                        {
                            Id = new Guid("9bfff448-f560-4756-8978-c3b717336546"),
                            CityImagePath = "",
                            CityName = "Пекин",
                            CountryId = new Guid("8729055c-441a-4434-ade4-c008f5913e98"),
                            IsCapital = true,
                            NormalizedName = "BEIJING"
                        },
                        new
                        {
                            Id = new Guid("5cabbcd8-e5c5-4c5d-ae6a-4304580ff0f8"),
                            CityImagePath = "",
                            CityName = "Шанхай",
                            CountryId = new Guid("8729055c-441a-4434-ade4-c008f5913e98"),
                            IsCapital = false,
                            NormalizedName = "SHANGHAI"
                        },
                        new
                        {
                            Id = new Guid("6d6819dc-7829-4231-889f-e1b5511a6b12"),
                            CityImagePath = "",
                            CityName = "Чунцин",
                            CountryId = new Guid("8729055c-441a-4434-ade4-c008f5913e98"),
                            IsCapital = false,
                            NormalizedName = "CHONGQING"
                        },
                        new
                        {
                            Id = new Guid("d01a74e2-30b4-4285-b8c7-1ea325c48fb4"),
                            CityImagePath = "",
                            CityName = "Тяньцзинь",
                            CountryId = new Guid("8729055c-441a-4434-ade4-c008f5913e98"),
                            IsCapital = false,
                            NormalizedName = "TIANJIN"
                        },
                        new
                        {
                            Id = new Guid("2138b8c0-c8ff-40ea-a993-3f76e8e0904f"),
                            CityImagePath = "",
                            CityName = "Токио",
                            CountryId = new Guid("5a1cb394-54fc-4bda-b4fb-5ab8112888d7"),
                            IsCapital = true,
                            NormalizedName = "TOKYO"
                        },
                        new
                        {
                            Id = new Guid("cd6ea4cc-92c7-49b8-aaa1-60139c288935"),
                            CityImagePath = "",
                            CityName = "Йокогама",
                            CountryId = new Guid("5a1cb394-54fc-4bda-b4fb-5ab8112888d7"),
                            IsCapital = false,
                            NormalizedName = "YOKOHAMA"
                        },
                        new
                        {
                            Id = new Guid("65788472-65ca-4427-b6c2-a6a6b3469aa0"),
                            CityImagePath = "",
                            CityName = "Осака",
                            CountryId = new Guid("5a1cb394-54fc-4bda-b4fb-5ab8112888d7"),
                            IsCapital = false,
                            NormalizedName = "OSAKA"
                        },
                        new
                        {
                            Id = new Guid("d78581de-41ca-45cf-89b5-16dd59fef178"),
                            CityImagePath = "",
                            CityName = "Нагоя",
                            CountryId = new Guid("5a1cb394-54fc-4bda-b4fb-5ab8112888d7"),
                            IsCapital = false,
                            NormalizedName = "NAGOYA"
                        },
                        new
                        {
                            Id = new Guid("f6a76f4a-ee56-49c3-85e3-cc10244c70ea"),
                            CityImagePath = "",
                            CityName = "Берлин",
                            CountryId = new Guid("de7fabf3-bcf5-45c0-a26b-9984aaadca14"),
                            IsCapital = false,
                            NormalizedName = "BERLIN"
                        },
                        new
                        {
                            Id = new Guid("1a1877f1-88dc-47e5-8c59-0f4cb246c309"),
                            CityImagePath = "",
                            CityName = "Гамбург",
                            CountryId = new Guid("de7fabf3-bcf5-45c0-a26b-9984aaadca14"),
                            IsCapital = false,
                            NormalizedName = "HAMBURG"
                        },
                        new
                        {
                            Id = new Guid("e3b0129d-62b9-459f-9708-719ddebeb258"),
                            CityImagePath = "",
                            CityName = "Мюнхен",
                            CountryId = new Guid("de7fabf3-bcf5-45c0-a26b-9984aaadca14"),
                            IsCapital = false,
                            NormalizedName = "MUNICH"
                        },
                        new
                        {
                            Id = new Guid("acbbe9b9-bbf2-4d6f-948e-7c5a6d8186e4"),
                            CityImagePath = "",
                            CityName = "Кёльн",
                            CountryId = new Guid("de7fabf3-bcf5-45c0-a26b-9984aaadca14"),
                            IsCapital = false,
                            NormalizedName = "COLOGNE"
                        },
                        new
                        {
                            Id = new Guid("77dc82a6-1d1d-4280-986d-29b4162ae012"),
                            CityImagePath = "",
                            CityName = "Париж",
                            CountryId = new Guid("849b0b80-1674-406c-bd9f-ab8c9d2e695f"),
                            IsCapital = true,
                            NormalizedName = "PARIS"
                        },
                        new
                        {
                            Id = new Guid("433d6bcb-7ae9-471c-8f03-28b361b12bae"),
                            CityImagePath = "",
                            CityName = "Марсель",
                            CountryId = new Guid("849b0b80-1674-406c-bd9f-ab8c9d2e695f"),
                            IsCapital = false,
                            NormalizedName = "MARSEILLE"
                        },
                        new
                        {
                            Id = new Guid("39db78cd-b657-42e5-9ead-9c6530e1cf38"),
                            CityImagePath = "",
                            CityName = "Лион",
                            CountryId = new Guid("849b0b80-1674-406c-bd9f-ab8c9d2e695f"),
                            IsCapital = false,
                            NormalizedName = "LYON"
                        },
                        new
                        {
                            Id = new Guid("124fdf70-3c49-4cc5-9c54-982b084aa6f7"),
                            CityImagePath = "",
                            CityName = "Тулуза",
                            CountryId = new Guid("849b0b80-1674-406c-bd9f-ab8c9d2e695f"),
                            IsCapital = false,
                            NormalizedName = "TOULOUSE"
                        },
                        new
                        {
                            Id = new Guid("e9c8d5b0-50c9-4c3f-affd-db5f01d026fc"),
                            CityImagePath = "",
                            CityName = "Вашингтон",
                            CountryId = new Guid("4ff950e4-bfb2-4c2a-bc63-c72b507ee7d8"),
                            IsCapital = true,
                            NormalizedName = "WASHINGTON"
                        },
                        new
                        {
                            Id = new Guid("f619c53f-24f6-4bb5-8ce1-20b38910e91c"),
                            CityImagePath = "",
                            CityName = "Нью-Йорк",
                            CountryId = new Guid("4ff950e4-bfb2-4c2a-bc63-c72b507ee7d8"),
                            IsCapital = false,
                            NormalizedName = "NEW_YORK_CITY"
                        },
                        new
                        {
                            Id = new Guid("44502b74-61ec-4890-a5dd-d0403f404a52"),
                            CityImagePath = "",
                            CityName = "Лос-Анджелес",
                            CountryId = new Guid("4ff950e4-bfb2-4c2a-bc63-c72b507ee7d8"),
                            IsCapital = false,
                            NormalizedName = "LOS_ANGELES"
                        },
                        new
                        {
                            Id = new Guid("cb8a9aba-66b5-45c0-9e45-24ccb649057a"),
                            CityImagePath = "",
                            CityName = "Чикаго",
                            CountryId = new Guid("4ff950e4-bfb2-4c2a-bc63-c72b507ee7d8"),
                            IsCapital = false,
                            NormalizedName = "CHICAGO"
                        },
                        new
                        {
                            Id = new Guid("21389196-bad4-47b3-8830-256accb5e4bc"),
                            CityImagePath = "",
                            CityName = "Пхеньян",
                            CountryId = new Guid("67b2bccc-5f79-43ce-9a9e-a41f50723ede"),
                            IsCapital = true,
                            NormalizedName = "PYONGYANG"
                        },
                        new
                        {
                            Id = new Guid("d371da0c-9768-4b16-8d72-fee257d07b2e"),
                            CityImagePath = "",
                            CityName = "Хамхын",
                            CountryId = new Guid("67b2bccc-5f79-43ce-9a9e-a41f50723ede"),
                            IsCapital = false,
                            NormalizedName = "HAMHUNG"
                        },
                        new
                        {
                            Id = new Guid("29bb7415-80df-48f6-9651-74d411e5d6fb"),
                            CityImagePath = "",
                            CityName = "Чхонджин",
                            CountryId = new Guid("67b2bccc-5f79-43ce-9a9e-a41f50723ede"),
                            IsCapital = false,
                            NormalizedName = "CHONJIN"
                        },
                        new
                        {
                            Id = new Guid("a827bb57-36db-45a8-8826-492f01dbbbc4"),
                            CityImagePath = "",
                            CityName = "Нампхо",
                            CountryId = new Guid("67b2bccc-5f79-43ce-9a9e-a41f50723ede"),
                            IsCapital = false,
                            NormalizedName = "NAMPO"
                        },
                        new
                        {
                            Id = new Guid("f71b4ede-fbc8-4746-a0a5-057128c91b97"),
                            CityImagePath = "",
                            CityName = "Тегеран",
                            CountryId = new Guid("ce14ea5a-408c-496d-8945-f02ad99864c8"),
                            IsCapital = true,
                            NormalizedName = "TEHRAN"
                        },
                        new
                        {
                            Id = new Guid("9bd081f0-3651-41af-96e4-bb705e870d4d"),
                            CityImagePath = "",
                            CityName = "Мешхед",
                            CountryId = new Guid("ce14ea5a-408c-496d-8945-f02ad99864c8"),
                            IsCapital = false,
                            NormalizedName = "MASHHAD"
                        },
                        new
                        {
                            Id = new Guid("47b50272-251c-4e1c-a5a1-b2c60f43c44f"),
                            CityImagePath = "",
                            CityName = "Исфахан",
                            CountryId = new Guid("ce14ea5a-408c-496d-8945-f02ad99864c8"),
                            IsCapital = false,
                            NormalizedName = "ISFAHAN"
                        },
                        new
                        {
                            Id = new Guid("0d9af802-ebd6-434e-9806-40bcf9d7b3e8"),
                            CityImagePath = "",
                            CityName = "Кередж",
                            CountryId = new Guid("ce14ea5a-408c-496d-8945-f02ad99864c8"),
                            IsCapital = false,
                            NormalizedName = "KARAJ"
                        },
                        new
                        {
                            Id = new Guid("7680a2c1-644e-4dbc-bcbd-26e57d664102"),
                            CityImagePath = "",
                            CityName = "Гавана",
                            CountryId = new Guid("7a7d6392-bb98-466b-ad91-5e08d2fa1e20"),
                            IsCapital = true,
                            NormalizedName = "HAVANA"
                        },
                        new
                        {
                            Id = new Guid("5e5cf244-931b-4a0f-8f55-6ebcaae898bc"),
                            CityImagePath = "",
                            CityName = "Санктьяго-де-Куба",
                            CountryId = new Guid("7a7d6392-bb98-466b-ad91-5e08d2fa1e20"),
                            IsCapital = false,
                            NormalizedName = "SANTIAGO_DE_CUBA"
                        },
                        new
                        {
                            Id = new Guid("419e8322-42df-404b-977a-baf8dff2b7e5"),
                            CityImagePath = "",
                            CityName = "Камагуэй",
                            CountryId = new Guid("7a7d6392-bb98-466b-ad91-5e08d2fa1e20"),
                            IsCapital = false,
                            NormalizedName = "CAMAGUEY"
                        },
                        new
                        {
                            Id = new Guid("e911205b-92cc-45b0-9083-3b2b729cd5b7"),
                            CityImagePath = "",
                            CityName = "Ольгин",
                            CountryId = new Guid("7a7d6392-bb98-466b-ad91-5e08d2fa1e20"),
                            IsCapital = false,
                            NormalizedName = "OLGUIN"
                        },
                        new
                        {
                            Id = new Guid("b564aab1-6026-4a99-9735-838e9d57a32f"),
                            CityImagePath = "",
                            CityName = "Берн",
                            CountryId = new Guid("c7f66ea7-7519-4982-9069-92376d8fc32a"),
                            IsCapital = true,
                            NormalizedName = "BERNE"
                        },
                        new
                        {
                            Id = new Guid("8bb58ae3-4c0f-49fa-bac0-806c39859610"),
                            CityImagePath = "",
                            CityName = "Цюрих",
                            CountryId = new Guid("c7f66ea7-7519-4982-9069-92376d8fc32a"),
                            IsCapital = false,
                            NormalizedName = "ZURICH"
                        },
                        new
                        {
                            Id = new Guid("ea834f6f-f2b2-4939-8148-8e6ef0a7d2d6"),
                            CityImagePath = "",
                            CityName = "Женева",
                            CountryId = new Guid("c7f66ea7-7519-4982-9069-92376d8fc32a"),
                            IsCapital = false,
                            NormalizedName = "GENEVA"
                        },
                        new
                        {
                            Id = new Guid("4193ca24-9643-4eb4-b039-008e7897b86d"),
                            CityImagePath = "",
                            CityName = "Базель",
                            CountryId = new Guid("c7f66ea7-7519-4982-9069-92376d8fc32a"),
                            IsCapital = false,
                            NormalizedName = "BASEL"
                        },
                        new
                        {
                            Id = new Guid("dd67860e-2152-40dc-a573-98a3c70583a5"),
                            CityImagePath = "",
                            CityName = "Лондон",
                            CountryId = new Guid("140c5d96-76fb-4212-9ced-3df524723952"),
                            IsCapital = true,
                            NormalizedName = "LONDON"
                        },
                        new
                        {
                            Id = new Guid("11de504b-caae-4696-a0e7-0a67f47b9f0a"),
                            CityImagePath = "",
                            CityName = "Бирмингем",
                            CountryId = new Guid("140c5d96-76fb-4212-9ced-3df524723952"),
                            IsCapital = false,
                            NormalizedName = "BIRMINGHAM"
                        },
                        new
                        {
                            Id = new Guid("8934ff58-c65c-439f-af45-8e1dcec3d2dc"),
                            CityImagePath = "",
                            CityName = "Глазго",
                            CountryId = new Guid("140c5d96-76fb-4212-9ced-3df524723952"),
                            IsCapital = false,
                            NormalizedName = "GLASGOW"
                        },
                        new
                        {
                            Id = new Guid("6df25cd9-2903-4556-ab21-cccd835c38c9"),
                            CityImagePath = "",
                            CityName = "Манчестер",
                            CountryId = new Guid("140c5d96-76fb-4212-9ced-3df524723952"),
                            IsCapital = false,
                            NormalizedName = "MANCHESTER"
                        });
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CountryPattern", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlagImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CountryPatterns", "Game");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00a2bc79-71ff-49b1-ab95-3e9e56a8ca48"),
                            CountryName = "Россия",
                            FlagImagePath = "",
                            NormalizedName = "RUSSIA"
                        },
                        new
                        {
                            Id = new Guid("8729055c-441a-4434-ade4-c008f5913e98"),
                            CountryName = "Китай",
                            FlagImagePath = "",
                            NormalizedName = "CHINA"
                        },
                        new
                        {
                            Id = new Guid("5a1cb394-54fc-4bda-b4fb-5ab8112888d7"),
                            CountryName = "Япония",
                            FlagImagePath = "",
                            NormalizedName = "JAPAN"
                        },
                        new
                        {
                            Id = new Guid("de7fabf3-bcf5-45c0-a26b-9984aaadca14"),
                            CountryName = "Германия",
                            FlagImagePath = "",
                            NormalizedName = "GERMANY"
                        },
                        new
                        {
                            Id = new Guid("849b0b80-1674-406c-bd9f-ab8c9d2e695f"),
                            CountryName = "Франция",
                            FlagImagePath = "",
                            NormalizedName = "FRANCE"
                        },
                        new
                        {
                            Id = new Guid("4ff950e4-bfb2-4c2a-bc63-c72b507ee7d8"),
                            CountryName = "США",
                            FlagImagePath = "",
                            NormalizedName = "UNITED_STATES"
                        },
                        new
                        {
                            Id = new Guid("67b2bccc-5f79-43ce-9a9e-a41f50723ede"),
                            CountryName = "Северная Корея",
                            FlagImagePath = "",
                            NormalizedName = "NORTH_KOREA"
                        },
                        new
                        {
                            Id = new Guid("ce14ea5a-408c-496d-8945-f02ad99864c8"),
                            CountryName = "Иран",
                            FlagImagePath = "",
                            NormalizedName = "IRAN"
                        },
                        new
                        {
                            Id = new Guid("7a7d6392-bb98-466b-ad91-5e08d2fa1e20"),
                            CountryName = "Куба",
                            FlagImagePath = "",
                            NormalizedName = "CUBA"
                        },
                        new
                        {
                            Id = new Guid("c7f66ea7-7519-4982-9069-92376d8fc32a"),
                            CountryName = "Швейцария",
                            FlagImagePath = "",
                            NormalizedName = "SWITZERLAND"
                        },
                        new
                        {
                            Id = new Guid("140c5d96-76fb-4212-9ced-3df524723952"),
                            CountryName = "Великобритания",
                            FlagImagePath = "",
                            NormalizedName = "GREAT_BRITAIN"
                        });
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Organizer", b =>
                {
                    b.HasBaseType("Game.Domain.DomainModels.Rooms.Entities.RoomMember");

                    b.HasDiscriminator().HasValue("Organizer");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Player", b =>
                {
                    b.HasBaseType("Game.Domain.DomainModels.Rooms.Entities.RoomMember");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.City", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Country", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Game", "Game")
                        .WithMany("Countries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.Room", "Room")
                        .WithMany("Countries")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Game", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.Room", "Room")
                        .WithOne("DomainGame")
                        .HasForeignKey("Game.Domain.DomainModels.Games.Entities.Game", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Order", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Country")
                        .WithOne("Order")
                        .HasForeignKey("Game.Domain.DomainModels.Games.Entities.Order", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Sanction", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Audience")
                        .WithMany("IncomingSanctions")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Issuer")
                        .WithMany("OutgoingSanctions")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.Message", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Messaging.Entities.NegotiationChat", null)
                        .WithMany("Messages")
                        .HasForeignKey("NegotiationChatId");

                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.RoomMember", "Issuer")
                        .WithMany("Messages")
                        .HasForeignKey("IssuerGameUserId", "IssuerRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.NegotiationChat", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "FirstCountry")
                        .WithMany()
                        .HasForeignKey("FirstCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "SecondCountry")
                        .WithMany()
                        .HasForeignKey("SecondCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstCountry");

                    b.Navigation("SecondCountry");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.NegotiationRequest", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Audience")
                        .WithMany("IncomingRequests")
                        .HasForeignKey("AudienceCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Issuer")
                        .WithMany("OutgoingRequests")
                        .HasForeignKey("IssuerCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Room", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Users.Entities.GameUser", "Creator")
                        .WithMany("Rooms")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.RoomMember", b =>
                {
                    b.HasOne("Game.Domain.DomainModels.Games.Entities.Country", "Country")
                        .WithMany("Players")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Game.Domain.DomainModels.Users.Entities.GameUser", "GameUser")
                        .WithMany("CreatedMembers")
                        .HasForeignKey("GameUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Domain.DomainModels.Rooms.Entities.Room", "Room")
                        .WithMany("RoomMembers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("GameUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CityPattern", b =>
                {
                    b.HasOne("Game.Infrastructure.Seed.CountryPattern", "CountryPattern")
                        .WithMany("CityPatterns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryPattern");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("IncomingRequests");

                    b.Navigation("IncomingSanctions");

                    b.Navigation("Order")
                        .IsRequired();

                    b.Navigation("OutgoingRequests");

                    b.Navigation("OutgoingSanctions");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Games.Entities.Game", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Messaging.Entities.NegotiationChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.Room", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("DomainGame")
                        .IsRequired();

                    b.Navigation("RoomMembers");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Rooms.Entities.RoomMember", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Game.Domain.DomainModels.Users.Entities.GameUser", b =>
                {
                    b.Navigation("CreatedMembers");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Game.Infrastructure.Seed.CountryPattern", b =>
                {
                    b.Navigation("CityPatterns");
                });
#pragma warning restore 612, 618
        }
    }
}

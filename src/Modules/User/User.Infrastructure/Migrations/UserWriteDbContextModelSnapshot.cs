// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using User.Infrastructure.Contexts;

#nullable disable

namespace User.Infrastructure.Migrations
{
    [DbContext(typeof(UserWriteDbContext))]
    partial class UserWriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("User")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("User.Domain.Entities.Achievment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2024, 10, 20, 22, 12, 33, 281, DateTimeKind.Utc).AddTicks(7076));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2024, 10, 20, 22, 12, 33, 281, DateTimeKind.Utc).AddTicks(7345));

                    b.HasKey("Id");

                    b.ToTable("Achievments", "User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e83f4db-293c-44c7-b93b-e70056f25fc4"),
                            Description = "Выиграйте игру в роли президента",
                            Name = "Великий вождь"
                        },
                        new
                        {
                            Id = new Guid("f2e29677-c93c-47c8-a8b9-1f9207409a88"),
                            Description = "Произведите 5 ядерных бомб",
                            Name = "Давай давай нападай"
                        },
                        new
                        {
                            Id = new Guid("7d1b7b03-3cdd-40ca-8ef9-7d441a1019da"),
                            Description = "Выиграйте игру, будучи обложенным санкциями всех стран",
                            Name = "Сильный и независимый"
                        },
                        new
                        {
                            Id = new Guid("250c0165-bf73-4100-a244-49491ca227c4"),
                            Description = "Сбросьте ядерную бомбу",
                            Name = "Радиоактивный пепел"
                        });
                });

            modelBuilder.Entity("User.Domain.Entities.DomainUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2024, 10, 20, 22, 12, 33, 281, DateTimeKind.Utc).AddTicks(32));

                    b.Property<string>("DefaultProfileImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2024, 10, 20, 22, 12, 33, 281, DateTimeKind.Utc).AddTicks(360));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "User");
                });

            modelBuilder.Entity("User.Domain.Entities.Relationships.UserAchievment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AchievmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AchievedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2024, 10, 20, 22, 12, 33, 282, DateTimeKind.Utc).AddTicks(8185));

                    b.HasKey("UserId", "AchievmentId");

                    b.HasIndex("AchievmentId");

                    b.ToTable("UserAchievments", "User");
                });

            modelBuilder.Entity("User.Domain.Entities.UserStatus", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ActivityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("GameRole")
                        .HasColumnType("text");

                    b.Property<int?>("RoundNumber")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("UserStatuses", "User");
                });

            modelBuilder.Entity("User.Domain.Entities.Relationships.UserAchievment", b =>
                {
                    b.HasOne("User.Domain.Entities.Achievment", "Achievment")
                        .WithMany("UserAchievments")
                        .HasForeignKey("AchievmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.Domain.Entities.DomainUser", "User")
                        .WithMany("UserAchievments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("User.Domain.Entities.UserStatus", b =>
                {
                    b.HasOne("User.Domain.Entities.DomainUser", "User")
                        .WithOne("UserStatus")
                        .HasForeignKey("User.Domain.Entities.UserStatus", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("User.Domain.Entities.Achievment", b =>
                {
                    b.Navigation("UserAchievments");
                });

            modelBuilder.Entity("User.Domain.Entities.DomainUser", b =>
                {
                    b.Navigation("UserAchievments");

                    b.Navigation("UserStatus")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
